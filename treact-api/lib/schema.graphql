interface Person{
   _id: ID!
   nombre: String!
   correo: String!
}

enum Level {
    Activo
    Inactivo
}


type Proyecto{
    _id: ID!
    titulo: String!
    profesor: String
    descripcion: String!
    people:[Estudiante]
    estadoProyecto: Level
}

type Estudiante implements Person{
    _id: ID!
    nombre: String!
    correo: String!
    estadoUsuario: Level   

}

type Administrador implements Person{
    _id: ID!
    nombre: String!
    correo: String!
    telefono: String
    estadoUsuario: Level   

}

type Lider implements Person{
    _id: ID!
    nombre: String!
    correo: String!
    telefono: String
    documentoIdentificacion: String
    estadoUsuario: Level   

}

union GlobalSearch = Proyecto | Estudiante | Administrador | Lider

type Query{
    "Devuelve todos los administradores, estudiantes y/o lider"
    getPeople:[Person]
    "Devuelve un administrador, estudiante y/o lider"
    getPerson(id: ID!): Person

    "Devuelve todos los Proyectos"
    getProyectos:[Proyecto]
    "Devuelve un Proyecto"
    getProyecto(id:ID!):Proyecto
    "Ejecuta una consulta global"
    searchItems(keyword: String!) : [GlobalSearch]
    

}

input ProyectoInput{
    titulo: String!
    profesor: String
    descripcion: String!
    estadoProyecto: Level
}

input ProyectoEditInput{
    titulo: String
    profesor: String
    descripcion: String
    estadoProyecto: Level
}

input PersonInput{
   nombre: String!
   correo: String!
   telefono: String
   documentoIdentificacion: String
   estadoUsuario: Level

}

input PersonEditInput{
   nombre: String
   correo: String
   telefono: String
   documentoIdentificacion: String
   estadoUsuario: Level
}

type Mutation{
 "Crear un Proyecto"
 createProyecto(input: ProyectoInput!): Proyecto
 "Editar un Proyecto"
 editProyecto(_id: ID!, input: ProyectoEditInput): Proyecto
 "Eliminar un Proyecto"
 deleteProyecto(_id: ID!): Boolean!

 "Crear un administrador, estudiante y/o lider"
 createPerson(input: PersonInput!): Person
 "Editar un administrador, estudiante y/o lider"
 editPerson(_id: ID!, input: PersonEditInput): Person
 "Elimiar un administrador, estudiante y/o lider"
 deletePerson(_id: ID!): Boolean!
 "Adicionar una persona a un proyecto"
 addPeople(proyectoID: ID!, personID: ID!): Proyecto
}
